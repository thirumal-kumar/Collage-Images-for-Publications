print("The code was generated by Dr. Thirumal Kumar D, Ph.D from India")

from PIL import Image, ImageOps, ImageDraw, ImageFont

# Ask for the number of images
num_images = int(input("Enter the number of images for the collage: "))

# List to store image paths
image_paths = []

# Collect image paths from user input
for i in range(num_images):
    image_path = input(f"Enter the file name for image {i+1} (e.g., image{i+1}.png): ")
    image_paths.append(image_path)

# Set the desired size for each image in the collage (excluding margin)
desired_size = (300, 300)  # Change this to your desired width and height
margin = 2  # Width of the black line separating images

# Calculate grid size to be as close to square as possible
grid_cols = int((num_images)**0.5)
grid_rows = grid_cols
if grid_cols * grid_rows < num_images:
    grid_cols += 1
if grid_cols * grid_rows < num_images:
    grid_rows += 1

# Calculate new size with margin
size_with_margin = (desired_size[0] + 2 * margin, desired_size[1] + 2 * margin)

# Create a new blank image for the collage, with added space for margins
collage_width = size_with_margin[0] * grid_cols
collage_height = size_with_margin[1] * grid_rows
collage = Image.new('RGB', (collage_width, collage_height), color='white')

# Define labels
labels = [f"({chr(97 + i)})" for i in range(num_images)]  # Creates ['(a)', '(b)', ..., depending on the number of images]

# Font settings (You may need to specify the full path to a .ttf file, or install the desired font)
try:
    font = ImageFont.truetype("arial.ttf", 20)
except IOError:
    font = ImageFont.load_default()

# Resize images, add a margin, label them, and paste them into the collage
for index, image_path in enumerate(image_paths):
    img = Image.open(image_path)
    img = img.resize(desired_size, Image.Resampling.LANCZOS)
    
    # Add label to the image
    draw = ImageDraw.Draw(img)
    text = labels[index]
    
    # Define the position for the label (top-left corner with offset)
    position = (10, 10)
    
    # Draw the text on the image
    draw.text(position, text, (0, 0, 0), font=font)  # Black text
    
    # Add black border to the image
    img_with_margin = ImageOps.expand(img, border=margin, fill='black')
    
    # Calculate the position for the image
    row = index // grid_cols
    col = index % grid_cols
    
    if row == grid_rows - 1 and num_images % grid_cols != 0:
        # Last row with fewer images, center them
        remaining_images = num_images % grid_cols
        total_margin = (grid_cols - remaining_images) * size_with_margin[0]
        x_offset = (col * size_with_margin[0]) + total_margin // 2
    else:
        # Regular positioning
        x_offset = col * size_with_margin[0]
    
    y_offset = row * size_with_margin[1]
    
    # Paste the image in the collage
    collage.paste(img_with_margin, (x_offset, y_offset))

# Save the collage
output_filename = input("Enter the output file name for the collage (e.g., collage.png): ")
collage.save(output_filename)

print(f"Collage saved as {output_filename}")
